#include <sodium.h>
#include <iostream>
#include <chrono>
#include <vector>

int main() {
    if (sodium_init() < 0) {
        std::cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å libsodium\n";
        return 1;
    }

    const size_t MESSAGE_SIZE = 10 * 1024 * 1024; // 10 –ú–ë
    std::vector<unsigned char> message(MESSAGE_SIZE);
    randombytes_buf(message.data(), MESSAGE_SIZE);

    std::vector<unsigned char> key(crypto_aead_chacha20poly1305_IETF_KEYBYTES);
    std::vector<unsigned char> nonce(crypto_aead_chacha20poly1305_IETF_NPUBBYTES);
    randombytes_buf(key.data(), key.size());
    randombytes_buf(nonce.data(), nonce.size());

    std::vector<unsigned char> ciphertext(MESSAGE_SIZE + crypto_aead_chacha20poly1305_IETF_ABYTES);
    std::vector<unsigned char> decrypted(MESSAGE_SIZE);

    unsigned long long ciphertext_len;
    unsigned long long decrypted_len;

    auto start = std::chrono::high_resolution_clock::now();

    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    crypto_aead_chacha20poly1305_ietf_encrypt(
        ciphertext.data(), &ciphertext_len,
        message.data(), message.size(),
        nullptr, 0, nullptr, nonce.data(), key.data()
    );

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    int result = crypto_aead_chacha20poly1305_ietf_decrypt(
        decrypted.data(), &decrypted_len,
        nullptr,
        ciphertext.data(), ciphertext_len,
        nullptr, 0, nonce.data(), key.data()
    );

    auto end = std::chrono::high_resolution_clock::now();

    if (result != 0) {
        std::cerr << "‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)\n";
        return 1;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (decrypted_len != message.size() || !std::equal(message.begin(), message.end(), decrypted.begin())) {
        std::cerr << "‚ùå –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏\n";
        return 1;
    }

    double duration_sec = std::chrono::duration<double>(end - start).count();
    double speed_mb_per_sec = MESSAGE_SIZE / (1024.0 * 1024.0) / duration_sec;

    std::cout << "‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ + —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω—ã\n";
    std::cout << "üì¶ –û–±—ä—ë–º: " << MESSAGE_SIZE / (1024 * 1024) << " –ú–ë\n";
    std::cout << "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: " << speed_mb_per_sec << " –ú–ë/—Å\n";

    return 0;
}
