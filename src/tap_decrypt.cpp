#include <iostream>
#include <fstream>
#include <vector>
#include <cstring>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/if_tun.h>
#include <netinet/in.h>
#include <net/if.h>
#include <sys/socket.h>
#include <sodium.h>
#include <arpa/inet.h> // –¥–ª—è inet_pton
#include <thread>
#include <chrono>
#include <sstream>
#include <iomanip>

constexpr size_t MAX_PACKET_SIZE = 2000;
constexpr size_t KEY_SIZE = crypto_aead_chacha20poly1305_IETF_KEYBYTES;
constexpr size_t NONCE_SIZE = crypto_aead_chacha20poly1305_IETF_NPUBBYTES;

int open_tap(const std::string &dev_name)
{
    struct ifreq ifr{};
    int fd = open("/dev/net/tun", O_RDWR);
    if (fd < 0)
    {
        perror("open /dev/net/tun");
        exit(1);
    }

    ifr.ifr_flags = IFF_TAP | IFF_NO_PI;
    std::strncpy(ifr.ifr_name, dev_name.c_str(), IFNAMSIZ);

    if (ioctl(fd, TUNSETIFF, &ifr) < 0)
    {
        perror("ioctl TUNSETIFF");
        close(fd);
        exit(1);
    }

    return fd;
}

int main(int argc, char *argv[])
{

    bool message_mode = false;
    if (argc >= 2 && std::string(argv[1]) == "--msg")
    {
        message_mode = true;
        argv++;
        argc--;
    }


    if (sodium_init() < 0)
    {
        std::cerr << "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å libsodium\n";
        return 1;
    }
    const char *ip_str = "0.0.0.0"; // —Å–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    int port = 12345;

    if (argc == 2)
    {
        port = std::stoi(argv[1]);
    }
    else if (argc >= 3)
    {
        ip_str = argv[1];
        port = std::stoi(argv[2]);
    }

    std::cout << "üåê –û–∂–∏–¥–∞–µ–º –ø–∞–∫–µ—Ç—ã –Ω–∞ IP: " << ip_str << ", –ø–æ—Ä—Ç: " << port << "\n";

    int tap_fd = open_tap("tap1");
    std::cout << "üì° tap1 –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö Ethernet-–∫–∞–¥—Ä–æ–≤\n";

    int sock = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock < 0)
    {
        perror("socket");
        return 1;
    }

    sockaddr_in local_addr{};
    local_addr.sin_family = AF_INET;
    local_addr.sin_port = htons(port);
    if (inet_pton(AF_INET, ip_str, &local_addr.sin_addr) <= 0)
    {
        std::cerr << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å\n";
        return 1;
    }

    if (bind(sock, (sockaddr *)&local_addr, sizeof(local_addr)) < 0)
    {
        perror("‚ùå bind() –Ω–µ —É–¥–∞–ª—Å—è");
        return 1;
    }
    // std::cout << "‚úÖ bind() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n";

    // === [–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ —á–µ—Ä–µ–∑ UDP] ===
    unsigned char my_public_key[crypto_kx_PUBLICKEYBYTES];
    unsigned char my_private_key[crypto_kx_SECRETKEYBYTES];
    crypto_kx_keypair(my_public_key, my_private_key);

    // 1. –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    unsigned char sender_public_key[crypto_kx_PUBLICKEYBYTES];
    sockaddr_in sender_addr{};
    socklen_t sender_len = sizeof(sender_addr);

    ssize_t received = recvfrom(sock, sender_public_key, crypto_kx_PUBLICKEYBYTES, 0,
                                (sockaddr *)&sender_addr, &sender_len);
    if (received != crypto_kx_PUBLICKEYBYTES)
    {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n";
        return 1;
    }
    std::cout << "üì• –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω\n";

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ–±—Ä–∞—Ç–Ω–æ
    sendto(sock, my_public_key, crypto_kx_PUBLICKEYBYTES, 0,
           (sockaddr *)&sender_addr, sender_len);
    std::cout << "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é\n";

    // 3. –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –∫–ª—é—á (rx_key)
    std::vector<unsigned char> key(KEY_SIZE);
    if (crypto_kx_server_session_keys(
            key.data(), nullptr,
            my_public_key, my_private_key,
            sender_public_key) != 0)
    {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –æ–±—â–µ–≥–æ –∫–ª—é—á–∞ (server)\n";
        return 1;
    }

    while (true)
    {
        unsigned char buffer[MAX_PACKET_SIZE];
        sockaddr_in sender_addr{};
        socklen_t sender_len = sizeof(sender_addr);

        ssize_t nrecv = recvfrom(sock, buffer, sizeof(buffer), 0, (sockaddr *)&sender_addr, &sender_len);
        if (nrecv <= NONCE_SIZE)
            continue;

        std::vector<unsigned char> nonce(buffer, buffer + NONCE_SIZE);
        std::vector<unsigned char> ciphertext(buffer + NONCE_SIZE, buffer + nrecv);

        std::vector<unsigned char> decrypted(ciphertext.size());
        unsigned long long decrypted_len = 0;

        int result = crypto_aead_chacha20poly1305_ietf_decrypt(
            decrypted.data(), &decrypted_len,
            nullptr,
            ciphertext.data(), ciphertext.size(),
            nullptr, 0,
            nonce.data(), key.data());

        if (result != 0)
        {
            std::cerr << "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏!\n";
            continue;
        }

        if (message_mode)
        {
            std::string received_msg(reinterpret_cast<char *>(decrypted.data()), decrypted_len);
            std::cout << "üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " << received_msg << "\n";
        }
        else
        {

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–¥—Ä –≤ tap1
            write(tap_fd, decrypted.data(), decrypted_len);
            std::cout << "‚úÖ –ü—Ä–∏–Ω—è—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω –∫–∞–¥—Ä (" << decrypted_len << " –±–∞–π—Ç)\n";

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            std::ofstream out("decrypted_frame.bin", std::ios::binary);
            out.write((char *)decrypted.data(), decrypted_len);
            out.close();

            // ‚è≥ –î–∞–µ–º tap_encrypt –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∞—Ç—å last_frame.bin
            std::this_thread::sleep_for(std::chrono::milliseconds(5));

            // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
            std::ifstream original("last_frame.bin", std::ios::binary);
            std::vector<unsigned char> original_frame(
                (std::istreambuf_iterator<char>(original)),
                std::istreambuf_iterator<char>());
            original.close();

            unsigned char hash1[crypto_hash_sha256_BYTES];
            crypto_hash_sha256(hash1, decrypted.data(), decrypted_len);

            // –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ö–µ—à–µ–º
            std::ifstream hashlog("sent_hashes.log");
            std::string hash_line;
            if (std::getline(hashlog, hash_line))
            {
                unsigned char expected[crypto_hash_sha256_BYTES];
                std::stringstream ss(hash_line);

                for (int i = 0; i < crypto_hash_sha256_BYTES; ++i)
                {
                    std::string byte_hex;
                    ss >> byte_hex;
                    expected[i] = static_cast<unsigned char>(std::stoul(byte_hex, nullptr, 16));
                }

                if (std::memcmp(hash1, expected, crypto_hash_sha256_BYTES) == 0)
                {
                    std::cout << "‚úÖ –•–µ—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –∫–∞–¥—Ä –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω\n";
                }
                else
                {
                    std::cerr << "‚ùå –û—à–∏–±–∫–∞: —Ö–µ—à–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –∫–∞–¥—Ä –ø–æ–≤—Ä–µ–∂–¥—ë–Ω\n";
                }
                // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ sent_hashes.log
                std::ifstream fin("sent_hashes.log");
                std::ofstream fout("sent_hashes.tmp");

                std::string skip_line;
                std::getline(fin, skip_line); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É

                std::string line;
                while (std::getline(fin, line))
                {
                    fout << line << "\n";
                }

                fin.close();
                fout.close();
                std::remove("sent_hashes.log");
                std::rename("sent_hashes.tmp", "sent_hashes.log");
            }
            else
            {
                std::cerr << "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ö–µ—à –∏–∑ sent_hashes.log ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ\n";
            }
        }
    }

    close(tap_fd);
    close(sock);
    return 0;
}
